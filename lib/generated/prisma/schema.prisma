// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  role            String           @default("manager") // "owner" or "manager"
  isOwner         Boolean          @default(false)
  country         String?
  monthlyFee      Float?
  status          String           @default("active")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  accounts        Account[]
  sessions        Session[]
  monthSelections MonthSelection[]
  dailyReports    DailyReport[]
  stockEntries    StockEntry[]
  staff           Staff[]
  ownerFunds      OwnerFund[]
  managerExpenses ManagerExpense[]
  credits         Credit[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MonthSelection {
  id          String   @id @default(cuid())
  month       Int
  year        Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String

  @@index([createdById])
}

model DailyReport {
  id          String   @id @default(cuid())
  date        DateTime
  sales       Float    @default(0)
  credit      Float    @default(0)
  expenses    Float    @default(0)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
}

model StockEntry {
  id          String   @id @default(cuid())
  date        DateTime
  items       Json // Store items as JSON array
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String

  @@index([createdById])
}

model Staff {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  country     String
  monthlyFee  Float
  role        String   @default("staff")
  status      String   @default("Active")
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String

  @@index([createdById])
}

model OwnerFund {
  id        String   @id @default(cuid())
  amount    Float
  purpose   String
  receipt   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ManagerExpense {
  id          String   @id @default(cuid())
  amount      Float
  description String
  receipt     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  managerId   String
  manager     User     @relation(fields: [managerId], references: [id])

  @@index([managerId])
}

model SalesReport {
  id             String   @id @default(cuid())
  itemName       String
  amount         Int
  unitPrice      Float
  totalPrice     Float
  cashAmount     Float    @default(0) // Amount paid in cash
  transferAmount Float    @default(0) // Amount paid via transfer
  image          String?
  managerId      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model MenuItem {
  id          String   @id @default(cuid())
  name        String
  category    String // e.g. "food" or "drink"
  price       Float
  image       String? // optional image URL
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Credit {
  id          String   @id @default(cuid())
  personName  String
  amount      Float
  status      String // "Pending", "Paid", "Overdue"
  type        String // "OWED" or "TO_RECEIVE"
  dueDate     DateTime
  items       Json // Store items as JSON array with name, quantity, and unit
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String

  @@index([createdById])
}
